{"ast":null,"code":"import { useConstant } from '../../utils/use-constant.mjs';\nimport { MotionValue } from '../index.mjs';\nimport { getWillChangeName } from './get-will-change-name.mjs';\nimport { removeItem } from '../../utils/array.mjs';\nclass WillChangeMotionValue extends MotionValue {\n  constructor() {\n    super(...arguments);\n    this.output = [];\n    this.counts = new Map();\n  }\n  add(name) {\n    const styleName = getWillChangeName(name);\n    if (!styleName) return;\n    /**\n     * Update counter. Each value has an indepdent counter\n     * as multiple sources could be requesting the same value\n     * gets added to will-change.\n     */\n    const prevCount = this.counts.get(styleName) || 0;\n    this.counts.set(styleName, prevCount + 1);\n    if (prevCount === 0) {\n      this.output.push(styleName);\n      this.update();\n    }\n    /**\n     * Prevents the remove function from being called multiple times.\n     */\n    let hasRemoved = false;\n    return () => {\n      if (hasRemoved) return;\n      hasRemoved = true;\n      const newCount = this.counts.get(styleName) - 1;\n      this.counts.set(styleName, newCount);\n      if (newCount === 0) {\n        removeItem(this.output, styleName);\n        this.update();\n      }\n    };\n  }\n  update() {\n    this.set(this.output.length ? this.output.join(\", \") : \"auto\");\n  }\n}\nfunction useWillChange() {\n  return useConstant(() => new WillChangeMotionValue(\"auto\"));\n}\nexport { WillChangeMotionValue, useWillChange };","map":{"version":3,"names":["useConstant","MotionValue","getWillChangeName","removeItem","WillChangeMotionValue","constructor","arguments","output","counts","Map","add","name","styleName","prevCount","get","set","push","update","hasRemoved","newCount","length","join","useWillChange"],"sources":["D:/React projects/Food app/frontend/node_modules/framer-motion/dist/es/value/use-will-change/index.mjs"],"sourcesContent":["import { useConstant } from '../../utils/use-constant.mjs';\nimport { MotionValue } from '../index.mjs';\nimport { getWillChangeName } from './get-will-change-name.mjs';\nimport { removeItem } from '../../utils/array.mjs';\n\nclass WillChangeMotionValue extends MotionValue {\n    constructor() {\n        super(...arguments);\n        this.output = [];\n        this.counts = new Map();\n    }\n    add(name) {\n        const styleName = getWillChangeName(name);\n        if (!styleName)\n            return;\n        /**\n         * Update counter. Each value has an indepdent counter\n         * as multiple sources could be requesting the same value\n         * gets added to will-change.\n         */\n        const prevCount = this.counts.get(styleName) || 0;\n        this.counts.set(styleName, prevCount + 1);\n        if (prevCount === 0) {\n            this.output.push(styleName);\n            this.update();\n        }\n        /**\n         * Prevents the remove function from being called multiple times.\n         */\n        let hasRemoved = false;\n        return () => {\n            if (hasRemoved)\n                return;\n            hasRemoved = true;\n            const newCount = this.counts.get(styleName) - 1;\n            this.counts.set(styleName, newCount);\n            if (newCount === 0) {\n                removeItem(this.output, styleName);\n                this.update();\n            }\n        };\n    }\n    update() {\n        this.set(this.output.length ? this.output.join(\", \") : \"auto\");\n    }\n}\nfunction useWillChange() {\n    return useConstant(() => new WillChangeMotionValue(\"auto\"));\n}\n\nexport { WillChangeMotionValue, useWillChange };\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,WAAW,QAAQ,cAAc;AAC1C,SAASC,iBAAiB,QAAQ,4BAA4B;AAC9D,SAASC,UAAU,QAAQ,uBAAuB;AAElD,MAAMC,qBAAqB,SAASH,WAAW,CAAC;EAC5CI,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,GAAGC,SAAS,CAAC;IACnB,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,MAAM,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC3B;EACAC,GAAGA,CAACC,IAAI,EAAE;IACN,MAAMC,SAAS,GAAGV,iBAAiB,CAACS,IAAI,CAAC;IACzC,IAAI,CAACC,SAAS,EACV;IACJ;AACR;AACA;AACA;AACA;IACQ,MAAMC,SAAS,GAAG,IAAI,CAACL,MAAM,CAACM,GAAG,CAACF,SAAS,CAAC,IAAI,CAAC;IACjD,IAAI,CAACJ,MAAM,CAACO,GAAG,CAACH,SAAS,EAAEC,SAAS,GAAG,CAAC,CAAC;IACzC,IAAIA,SAAS,KAAK,CAAC,EAAE;MACjB,IAAI,CAACN,MAAM,CAACS,IAAI,CAACJ,SAAS,CAAC;MAC3B,IAAI,CAACK,MAAM,CAAC,CAAC;IACjB;IACA;AACR;AACA;IACQ,IAAIC,UAAU,GAAG,KAAK;IACtB,OAAO,MAAM;MACT,IAAIA,UAAU,EACV;MACJA,UAAU,GAAG,IAAI;MACjB,MAAMC,QAAQ,GAAG,IAAI,CAACX,MAAM,CAACM,GAAG,CAACF,SAAS,CAAC,GAAG,CAAC;MAC/C,IAAI,CAACJ,MAAM,CAACO,GAAG,CAACH,SAAS,EAAEO,QAAQ,CAAC;MACpC,IAAIA,QAAQ,KAAK,CAAC,EAAE;QAChBhB,UAAU,CAAC,IAAI,CAACI,MAAM,EAAEK,SAAS,CAAC;QAClC,IAAI,CAACK,MAAM,CAAC,CAAC;MACjB;IACJ,CAAC;EACL;EACAA,MAAMA,CAAA,EAAG;IACL,IAAI,CAACF,GAAG,CAAC,IAAI,CAACR,MAAM,CAACa,MAAM,GAAG,IAAI,CAACb,MAAM,CAACc,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;EAClE;AACJ;AACA,SAASC,aAAaA,CAAA,EAAG;EACrB,OAAOtB,WAAW,CAAC,MAAM,IAAII,qBAAqB,CAAC,MAAM,CAAC,CAAC;AAC/D;AAEA,SAASA,qBAAqB,EAAEkB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}